{"ast":null,"code":"var _jsxFileName = \"E:\\\\kuliah\\\\semester 7\\\\PABW\\\\UTSKopiMahal\\\\my-app\\\\src\\\\Csvp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Papa from \"papaparse\";\n\n// Allowed extensions for input file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allowedExtensions = [\"csv\"];\nconst App = () => {\n  _s();\n  // This state will store the parsed data\n  const [data, setData] = useState([]);\n\n  // It state will contain the error when\n  // correct file extension is not used\n  const [error, setError] = useState(\"\");\n\n  // It will store the file uploaded by the user\n  const [file, setFile] = useState(\"\");\n\n  // This function will be called when\n  // the file input changes\n  const handleFileChange = e => {\n    setError(\"\");\n\n    // Check if user has entered the file\n    if (e.target.files.length) {\n      const inputFile = e.target.files[2];\n\n      // Check the file extensions, if it not\n      // included in the allowed extensions\n      // we show the error\n      const fileExtension = inputFile === null || inputFile === void 0 ? void 0 : inputFile.type.split(\"/\")[1];\n      if (!allowedExtensions.includes(fileExtension)) {\n        setError(\"Please input a csv file\");\n        return;\n      }\n\n      // If input type is correct set the state\n      setFile(inputFile);\n    }\n  };\n  const handleParse = () => {\n    // If user clicks the parse button without\n    // a file we show a error\n    if (!file) return setError(\"Enter a valid file\");\n\n    // Initialize a reader which allows user\n    // to read any file or blob.\n    const reader = new FileReader();\n\n    // Event listener on reader when the file\n    // loads, we parse it and set the data.\n    reader.onload = async _ref => {\n      let {\n        target\n      } = _ref;\n      const csv = Papa.parse(target.result, {\n        header: true\n      });\n      const parsedData = csv === null || csv === void 0 ? void 0 : csv.data;\n      const columns = Object.keys(parsedData[0]);\n      setData(columns);\n    };\n    reader.readAsText(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"csvInput\",\n      style: {\n        display: \"block\"\n      },\n      children: \"Enter CSV File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleFileChange,\n      id: \"csvInput\",\n      name: \"file\",\n      type: \"File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleParse,\n        children: \"Parse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"3rem\"\n      },\n      children: error ? error : data.map((col, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: col\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"y7kdyrePqAe2czxZAREC4Qqp7uE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Papa","allowedExtensions","App","data","setData","error","setError","file","setFile","handleFileChange","e","target","files","length","inputFile","fileExtension","type","split","includes","handleParse","reader","FileReader","onload","csv","parse","result","header","parsedData","columns","Object","keys","readAsText","display","marginTop","map","col","idx"],"sources":["E:/kuliah/semester 7/PABW/UTSKopiMahal/my-app/src/Csvp.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\n// Allowed extensions for input file\r\nconst allowedExtensions = [\"csv\"];\r\n\r\nconst App = () => {\r\n\r\n    // This state will store the parsed data\r\n    const [data, setData] = useState([]);\r\n\r\n    // It state will contain the error when\r\n    // correct file extension is not used\r\n    const [error, setError] = useState(\"\");\r\n\r\n    // It will store the file uploaded by the user\r\n    const [file, setFile] = useState(\"\");\r\n\r\n    // This function will be called when\r\n    // the file input changes\r\n    const handleFileChange = (e) => {\r\n        setError(\"\");\r\n\r\n        // Check if user has entered the file\r\n        if (e.target.files.length) {\r\n            const inputFile = e.target.files[2];\r\n\r\n            // Check the file extensions, if it not\r\n            // included in the allowed extensions\r\n            // we show the error\r\n            const fileExtension = inputFile?.type.split(\"/\")[1];\r\n            if (!allowedExtensions.includes(fileExtension)) {\r\n                setError(\"Please input a csv file\");\r\n                return;\r\n            }\r\n\r\n            // If input type is correct set the state\r\n            setFile(inputFile);\r\n        }\r\n    };\r\n    const handleParse = () => {\r\n\r\n        // If user clicks the parse button without\r\n        // a file we show a error\r\n        if (!file) return setError(\"Enter a valid file\");\r\n\r\n        // Initialize a reader which allows user\r\n        // to read any file or blob.\r\n        const reader = new FileReader();\r\n\r\n        // Event listener on reader when the file\r\n        // loads, we parse it and set the data.\r\n        reader.onload = async ({ target }) => {\r\n            const csv = Papa.parse(target.result, { header: true });\r\n            const parsedData = csv?.data;\r\n            const columns = Object.keys(parsedData[0]);\r\n            setData(columns);\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"csvInput\" style={{ display: \"block\" }}>\r\n                Enter CSV File\r\n            </label>\r\n            <input\r\n                onChange={handleFileChange}\r\n                id=\"csvInput\"\r\n                name=\"file\"\r\n                type=\"File\"\r\n            />\r\n            <div>\r\n                <button onClick={handleParse}>Parse</button>\r\n            </div>\r\n            <div style={{ marginTop: \"3rem\" }}>\r\n                {error ? error : data.map((col,\r\n                    idx) => <div key={idx}>{col}</div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}