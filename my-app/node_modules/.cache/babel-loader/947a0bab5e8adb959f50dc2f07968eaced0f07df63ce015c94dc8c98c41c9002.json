{"ast":null,"code":"import XMLData from \"./carsData/Cars.xml\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nfunction Xml() {\n  var rawFile = new XMLHttpRequest();\n  rawFile.open(\"GET\", XMLData, false);\n  rawFile.onreadystatechange = () => {\n    if (rawFile.readyState === 4) {\n      if (rawFile.status === 200 || rawFile.status == 0) {\n        var xmlasstring = rawFile.responseText;\n        console.log('Cars.xml', xmlasstring);\n      }\n    }\n  };\n\n  // axios.get(XMLData, {\n  //     \"Content-Type\": \"application/xml; charset=utf-8\"\n  // })\n  //     .then((response) => {\n  //         console.log('XMLData', response.data);\n\n  //     });\n\n  // const [dataXML, setdata] = useState({});\n\n  // const getData = async () => {\n  //     try {\n  //         const response = await axios.get(\n  //             \"XMLData\",\n\n  //             {\n  //                 \"Content-Type\": \"application/xml; charset=utf-8\",\n  //             }\n  //         );\n\n  //         setdata(response.data[0]);\n  //     } catch (error) {\n  //         console.log(error);\n  //     }\n  // };\n\n  // useEffect(() => {\n  //     getData();\n  // }, []);\n\n  // console.log(dataXML);\n\n  // return (\n  //     <div>\n  //         <h1>{dataXML.Id}</h1>\n\n  //         <h2>{dataXML.Name}</h2>\n  //     </div>\n  // );\n}\n_c = Xml;\nexport default Xml;\nvar _c;\n$RefreshReg$(_c, \"Xml\");","map":{"version":3,"names":["XMLData","useState","useEffect","axios","Xml","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","xmlasstring","responseText","console","log"],"sources":["E:/kuliah/semester 7/PABW/UTSKopiMahal/my-app/src/Xml.js"],"sourcesContent":["import XMLData from \"./carsData/Cars.xml\"\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction Xml() {\r\n\r\n    var rawFile = new XMLHttpRequest();\r\n    rawFile.open(\"GET\", XMLData, false);\r\n    rawFile.onreadystatechange = () => {\r\n        if (rawFile.readyState === 4) {\r\n            if (rawFile.status === 200 || rawFile.status == 0) {\r\n                var xmlasstring = rawFile.responseText;\r\n                console.log('Cars.xml', xmlasstring)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // axios.get(XMLData, {\r\n    //     \"Content-Type\": \"application/xml; charset=utf-8\"\r\n    // })\r\n    //     .then((response) => {\r\n    //         console.log('XMLData', response.data);\r\n\r\n    //     });\r\n\r\n\r\n\r\n\r\n    // const [dataXML, setdata] = useState({});\r\n\r\n    // const getData = async () => {\r\n    //     try {\r\n    //         const response = await axios.get(\r\n    //             \"XMLData\",\r\n\r\n    //             {\r\n    //                 \"Content-Type\": \"application/xml; charset=utf-8\",\r\n    //             }\r\n    //         );\r\n\r\n    //         setdata(response.data[0]);\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //     }\r\n    // };\r\n\r\n    // useEffect(() => {\r\n    //     getData();\r\n    // }, []);\r\n\r\n    // console.log(dataXML);\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <h1>{dataXML.Id}</h1>\r\n\r\n    //         <h2>{dataXML.Name}</h2>\r\n    //     </div>\r\n    // );\r\n}\r\n\r\nexport default Xml;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,qBAAqB;AAEzC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,GAAG,GAAG;EAEX,IAAIC,OAAO,GAAG,IAAIC,cAAc,EAAE;EAClCD,OAAO,CAACE,IAAI,CAAC,KAAK,EAAEP,OAAO,EAAE,KAAK,CAAC;EACnCK,OAAO,CAACG,kBAAkB,GAAG,MAAM;IAC/B,IAAIH,OAAO,CAACI,UAAU,KAAK,CAAC,EAAE;MAC1B,IAAIJ,OAAO,CAACK,MAAM,KAAK,GAAG,IAAIL,OAAO,CAACK,MAAM,IAAI,CAAC,EAAE;QAC/C,IAAIC,WAAW,GAAGN,OAAO,CAACO,YAAY;QACtCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,WAAW,CAAC;MACxC;IACJ;EACJ,CAAC;;EAGD;EACA;EACA;EACA;EACA;;EAEA;;EAKA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;AACJ;AAAC,KAxDQP,GAAG;AA0DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}